install.packages(data.table)
install.packages(data.table)
install.packages(datatable)
install.packages(data.tables)
library(data.table)
data.table
install.packages("data.table")
library(stats)
?stat.anova
install.packages()
install.packages('shiny')
clear
clear()
install.packages(c('dplyr','ggplot2','manipulate')
install.packages(c('dplyr','ggplot2','manipulate','markdown','knitr')
)
library(markdown)
markdown::markdownExtensions()
?tidyverse
??tidyverse
install.packages('tidyverse')
?dnorm
install.packages("shinydashboard")
install.packages(c("shiny", "dplyr", "htmlwidgets", "digest", "bit"))
devtools::install_github("rstudio/shinydashboard")
devtools::install_github("jcheng5/bubbles")
devtools::install_github("hadley/shinySignals")
library()
install.packages('devtools')
devtools::install_github("rstudio/shinydashboard")
devtools::install_github("jcheng5/bubbles")
devtools::install_github("hadley/shinySignals")
?coeff
??coeff
?corr
?cor
?var
7c4
?combination
??combination
library('gtools')
?choose
choose(7,3) * choose(4,2)
perm(7,3) * choose(4,2)
?perm
??perm
install.packages("combinat")
?permn
library('combinat')
?permn
perm(7,3) * choose(4,2) * 7
choose(7,3) * choose(4,2) * 7
choose(7,3) * choose(4,2) * 5
choose(6,1)
choose(6,1) * choose(9,5)
choose(6,1) + choose(9,5)
choose(6,1) + choose(9,3)
choose(6,1) * choose(9,3)
choose(9,3)
209/84
choose(6,1) * choose(10,3)
choose(10,3)
?choose
choose(1,6)
choose(7,3) * choose(4,2)
choose(7,3) * choose(4,2) * factorial(5)
choose(6,1) * choose(10,3)
choose(6,1) * choose(9,3)
combn(7,3)
length(combn(7,3))
choose(7,3)
len(combn(7,3))
nrow(choose(7,3))
nrow(permutations(3,2))
library('gtools')
install.package('gtools')
install.packages('gtools')
library('gtools')
nrow(permutations(3,2))
nrow(permutations(5,5))
5!
factorial(5)
nrow(permutations(5,5))
choose(6,1) * choose(9,3)
choose(6,1) * choose(9,3)
ttet
?ttest
?ttest
shiny::runApp('GitHub/ASARDashboard/ShinyR')
getwd9)
getwd()
setwd('./')
stb_4 <- read_excel("./data/4.0.xlsx")
library(readxl)
setwd('./')
stb_4 <- read_excel("./data/4.0.xlsx")
getwd()
source('GitHub/ASARDashboard/shiny_main.R')
shiny::runApp("shinyR")
shiny::runApp("ShinyR")
source('GitHub/ASARDashboard/shiny_main.R')
source('GitHub/ASARDashboard/shiny_main.R')
source('GitHub/ASARDashboard/shiny_main.R')
source('GitHub/ASARDashboard/shiny_main.R')
source('GitHub/ASARDashboard/shiny_main.R')
source('GitHub/ASARDashboard/shiny_main.R')
source('GitHub/ASARDashboard/shiny_main.R')
source('GitHub/ASARDashboard/shiny_main.R')
source('GitHub/ASARDashboard/shiny_main.R')
getwd()
library(shiny); source('GitHub/ASARDashboard/shiny_main.R')
source('shiny_main.R')
?read_html
source('shiny_main.R')
source('shiny_main.R')
source('shiny_main.R')
"asd" + "def"
v
paste0('Similar Countries: ',similarcountries
source('shiny_main.R')
source('shiny_main.R')
runApp()
source('shiny_main.R')
source('shiny_main.R')
source('shiny_main.R')
runApp('ShinyR')
library(formattable)
source('shiny_main.R')
install.packages("formattable")
runApp('ShinyR')
runApp('ShinyR')
source('shiny_main.R')
source('~/GitHub/ASARDashboard/shiny_main.R')
source('shiny_main.R')
source('shiny_main.R')
url <- "https://www.nationsonline.org/oneworld/country_code_list.htm"
iso_codes <- url %>%
read_html() %>%
html_nodes(xpath = '//*[@id="CountryCode"]') %>%
html_table()
iso_codes <- iso_codes[[1]][, -1]
iso_codes <- iso_codes[!apply(iso_codes, 1, function(x){all(x == x[1])}), ]
names(iso_codes) <- c("Country", "ISO2", "ISO3", "UN")
world_data <- ggplot2::map_data('world')
world_data <- fortify(world_data)
stb_4$Value = as.numeric(stb_4$Value)
stb_4['ISO3'] <- iso_codes$ISO3[match(stb_4$place_of_residence, iso_codes$Country)]
world_data["ISO3"] <- iso_codes$ISO3[match(world_data$region, iso_codes$Country)]
old_names1 <- c("UK", "South Korea", "Taiwan", "USA", "Vietnam")
new_names1 <- c("United Kingdom", "Korea (South)", "Taiwan, Republic of China","United States of America", "Viet Nam")
for (i in 1:length(old_names1)){
world_data$region[world_data$region == old_names1[i]] <- new_names1[i]
}
##it's time to define the function that we'll use for building our world maps.
my_theme <- function () {
theme_bw() + theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white'))
}
plotdf <- stb_4
world_data['Value'] <- plotdf$Value[match(world_data$ISO3, plotdf$ISO3)]
## Do tooltips
cluster1 <- c("Thailand", "Vietnam")
cluster2 <- c("Netherlands", "USA", "Germany")
cluster3 <- c("Canada", "UK")
cluster4 <- c("South Korea", "Taiwan", "China")
cluster5 <- c("France", "South Africa")
cluster6 <- c("Philippines", "Russian Federation")
cluster7 <- c("Australia", "New Zealand")
cluster8 <- c("Indonesia", "Malaysia")
cluster9 <- c("Hong Kong", "Japan")
cluster10 <- c("India", "Others")
similarcountries <- list(cluster1, cluster2, cluster3, cluster4, cluster5, cluster6, cluster7, cluster8, cluster9, cluster10)
world_data = world_data %>%
mutate(similarcountries = case_when(
.$region %in% cluster1 ~ paste( unlist(cluster1), collapse=', '),
.$region %in% cluster2 ~ paste( unlist(cluster2), collapse=', '),
.$region %in% cluster3 ~ paste( unlist(cluster3), collapse=', '),
.$region %in% cluster4 ~ paste( unlist(cluster4), collapse=', '),
.$region %in% cluster5 ~ paste( unlist(cluster5), collapse=', '),
.$region %in% cluster6 ~ paste( unlist(cluster6), collapse=', '),
.$region %in% cluster7 ~ paste( unlist(cluster7), collapse=', '),
.$region %in% cluster8 ~ paste( unlist(cluster8), collapse=', '),
.$region %in% cluster9 ~ paste( unlist(cluster9), collapse=', '),
.$region %in% cluster10 ~ paste( unlist(cluster10), collapse=', '),
TRUE ~ "None"
))
# Specify the plot for the world map
library(RColorBrewer)
library(ggiraph)
g <- ggplot() +
geom_polygon_interactive(data = subset(world_data, lat >= -60 & lat <= 90), color = 'grey70', size = 0.1,
aes(x = long, y = lat, fill = Value, group = group,
tooltip = sprintf("%s<br/>%s<br/>Similar Countries: %s", region, Value, similarcountries))) +
scale_fill_gradientn(colours = brewer.pal(5, "RdBu"), na.value = 'white') +
labs(fill = NULL, title = NULL, x = NULL, y = NULL) +
my_theme()
g <- ggplot() +
geom_polygon_interactive(data = subset(world_data, lat >= -60 & lat <= 90), color = 'grey70', size = 0.1,
aes(x = long, y = lat, fill = Value, group = group,
tooltip = sprintf("%s<br/>%s<br/>Similar Countries: %s", region, Value))) +
scale_fill_gradientn(colours = brewer.pal(5, "RdBu"), na.value = 'white') +
labs(fill = NULL, title = NULL, x = NULL, y = NULL) +
my_theme()
g
g
g <- ggplot() +
geom_polygon_interactive(data = subset(world_data, lat >= -60 & lat <= 90), color = 'grey70', size = 0.1,
aes(x = long, y = lat, fill = Value, group = group,
tooltip = sprintf("%s<br/>%s<br/>Similar Countries: %s", region, Value,""))) +
scale_fill_gradientn(colours = brewer.pal(5, "RdBu"), na.value = 'white') +
labs(fill = NULL, title = NULL, x = NULL, y = NULL) +
my_theme()
g
g <- ggplot() +
geom_polygon_interactive(data = subset(world_data, lat >= -60 & lat <= 90), color = 'grey70', size = 0.1,
aes(x = long, y = lat, fill = Value, group = group,
tooltip = sprintf("%s<br/>%s<br/>Similar Countries: %s", region, Value,similarcountries))) +
scale_fill_gradientn(colours = brewer.pal(5, "RdBu"), na.value = 'white') +
labs(fill = NULL, title = NULL, x = NULL, y = NULL) +
my_theme()
g
source('shiny_main.R')
source('shiny_main.R')
source('shiny_main.R')
source('~/GitHub/ASARDashboard/shiny_main.R')
runApp('ShinyR')
##Subset to keep only Jan-2015 to Dec-2019 records
stb_2_2015_2019 <- subset(stb_2, as.numeric(format(stb_2$month,'%Y'))>=2015 & as.numeric(format(stb_2$month,'%Y'))<=2019)
##Subset to keep only Jan-2015 to Dec-2019 records
stb_2_2015_2019 <- subset(stb_2, as.numeric(format(stb_2$month,'%Y'))>=2015 & as.numeric(format(stb_2$month,'%Y'))<=2019)
#Overall Arrival
stb_2_Overall <- stb_2_2015_2019 %>% group_by(month) %>% summarise(total_arrival = sum(arrivals))
#Arrival by Region
stb_2_Region <- stb_2_2015_2019 %>% group_by(month, region) %>% summarise(total_arrival_region = sum(arrivals))
#Arrival by Region
stb_2_Region <- stb_2_2015_2019 %>% group_by(month, region) %>% summarise(total_arrival_region = sum(arrivals))
#Arrival by Country
stb_2_Country <- stb_2_2015_2019 %>% group_by(month, place_of_residence) %>% summarise(total_arrival_country = sum(arrivals))
## Subset to keep only Jan-2016 to Dec-2019 records
stb_2_Overall_2016_2019 <- subset(stb_2_Overall, as.numeric(format(stb_2_Overall$month,'%Y'))>=2016 & as.numeric(format(stb_2_Overall$month,'%Y'))<=2019)
#Convert into timeseries data and plot the timeseries
dat_ts_2016_2019 <- ts(stb_2_Overall_2016_2019[, 2], start = c(2016, 1), end = c(2019, 12), frequency = 12)
#######Forecast using Auto ARIMA method########
arima_model_2016_2019 <- auto.arima(dat_ts_2016_2019)
fore_arima_2016_2019 = forecast::forecast(arima_model_2016_2019, h=12)
df_arima_2016_2019 = as.data.frame(fore_arima_2016_2019)
df_arima_2016_2019
dat_ts_2019 <- subset(stb_2, as.numeric(format(stb_2$month,'%Y'))==2019)
dat_ts_2019
stb_2
dat_ts_2019 <- subset(stb_2, as.numeric(format(stb_2$month,'%Y'))==2019)
dat_ts_2019
source('shiny_main.R')
runApp()
source('shiny_main.R')
source('shiny_main.R')
ui <- fluidPage(
dashboardPage(
dashboardHeader(title = "Forecasting the Tourism Market"),
dashboardSidebar(
pickerInput("YearMonthInput","Choose the month year to look at:", choices=unique(stb_2$yearmonth), options = list(`actions-box` = T),multiple = T, selected=unique(stb_2$yearmonth)),
sidebarMenu(
menuItem("Dashboard", tabName = "Dashboard"),
menuItem("Raw Data", tabName = "RawData"),
menuItem("Forecast", tabName = "Prediction")
)
),
# dashboardBody first try (works no problem):
#dashboardBody(DT::dataTableOutput(outputId = 'mytable'))
#dashboardBody second try (data table does not appear):
dashboardBody(
tabItems(
fluidRow(box(width=12, style='padding:10px',
girafeOutput('map'))),
tabItem(tabName = "Dashboard",
fluidRow(box(width=6, style='padding:10px',
pickerInput("RegionInput","Choose the Region of interest:", choices=unique(stb_2$region), options = list(`actions-box` = T),multiple = T, selected=unique(stb_2$region))),
box(width=6, style='padding:10px',
pickerInput("CountryInput","Choose the Country of interest:", choices=stb_2$place_of_residence, options = list(`actions-box` = T),multiple = T, selected=stb_2$place_of_residence),
)),
fluidRow(box(title = "Arrival By Gender", status = "primary", solidHeader = TRUE, collapsible = TRUE, width=6, style='padding:10px',
plotOutput("arrivalsbygender", height = "300px")
),
box(title = "Arrival By Age Groups", status = "primary", solidHeader = TRUE, collapsible = TRUE, width=6, style='padding:10px',
plotOutput("arrivalsbyage", height = "300px")
)),
fluidRow(
box(title = "Visit Duration", status = "primary", solidHeader = TRUE, collapsible = TRUE, width=12, style='padding:10px',
plotOutput("visitduration", height = "300px")
))),
tabItem(tabName = "RawData",
DT::dataTableOutput(outputId = 'rawtable')),
tabItem(tabName = "Prediction",
# fluidRow(box(width=12, style='padding:10px',
#           girafeOutput('map'))),
fluidRow(box(width=6, style='padding:10px',
pickerInput("RegionInput","Choose the Region of interest:", choices=unique(stb_2$region), options = list(`actions-box` = T),multiple = T, selected=unique(stb_2$region))),
box(width=6, style='padding:10px',
pickerInput("CountryInput","Choose the Country of interest:", choices=stb_2$place_of_residence, options = list(`actions-box` = T),multiple = T, selected=stb_2$place_of_residence),
)),
fluidRow(box(width=6, style='padding:10px', height = 150,
plotOutput('prediction_graph')),
box(width=6, style='padding:10px', height = 150,
DT::dataTableOutput(outputId = 'predictionTable'))))
))
))
source('shiny_main.R')
source('shiny_main.R')
source('shiny_main.R')
source('shiny_main.R')
runApp('ShinyR')
source('shiny_main.R')
source('shiny_main.R')
url <- "https://www.nationsonline.org/oneworld/country_code_list.htm"
iso_codes <- url %>%
read_html() %>%
html_nodes(xpath = '//*[@id="CountryCode"]') %>%
html_table()
iso_codes <- iso_codes[[1]][, -1]
iso_codes <- iso_codes[!apply(iso_codes, 1, function(x){all(x == x[1])}), ]
names(iso_codes) <- c("Country", "ISO2", "ISO3", "UN")
world_data <- ggplot2::map_data('world')
world_data <- fortify(world_data)
stb_4$Value = as.numeric(stb_4$Value)
stb_4['ISO3'] <- iso_codes$ISO3[match(stb_4$place_of_residence, iso_codes$Country)]
world_data["ISO3"] <- iso_codes$ISO3[match(world_data$region, iso_codes$Country)]
old_names1 <- c("UK", "South Korea", "Taiwan", "USA", "Vietnam")
new_names1 <- c("United Kingdom", "Korea (South)", "Taiwan, Republic of China","United States of America", "Viet Nam")
for (i in 1:length(old_names1)){
world_data$region[world_data$region == old_names1[i]] <- new_names1[i]
}
##it's time to define the function that we'll use for building our world maps.
my_theme <- function () {
theme_bw() + theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white'))
}
plotdf <- stb_4
plotdf
world_data
head(world_data)
world_data['Value'] <- sum(plotdf$Value[match(world_data$ISO3, plotdf$ISO3)])
head(world_data)
world_data['Value'] <- (plotdf$Value[match(world_data$ISO3, plotdf$ISO3)])
head(world_data)
tail(world_Data)
tail(world_data)
world_data['Value'] <- sum(plotdf$Value[match(world_data$ISO3, plotdf$ISO3)])
tail(world_data)
world_data['Value'] <- sum(plotdf$Value[which(match(world_data$ISO3, plotdf$ISO3))])
v
match(world_data$ISO3, plotdf$ISO3)
colnames(stb_4)
gendervars = c("Month","Place of Residence","Male","Female","Total")
stb_4_gender = stb_4[gendervars]
gendervars = c("month","place_of_residence","male","female")
stb_4_gender = stb_4[gendervars]
stb_4_melt <- melt(stb_4_gender, id = c("Month", "ISO3", "Place of Residence"),
variable.name = "Indicator", value.name = "Value")
gendervars = c("month","place_of_residence","male","female",'ISO3')
stb_4_gender = stb_4[gendervars]
stb_4_melt <- melt(stb_4_gender, id = c("month", "ISO3", "place_of_residence"),
variable.name = "Indicator", value.name = "Value")
stb_4_melt
stb_4_melt <- melt(stb_4_gender, id = c("ISO3", "place_of_residence"),
variable.name = "Indicator", value.name = "Value")
stb_4_melt
gendervars = c("place_of_residence","male","female",'ISO3')
stb_4_gender = stb_4[gendervars]
stb_4_melt <- melt(stb_4_gender, id = c("ISO3", "place_of_residence"),
variable.name = "Indicator", value.name = "Value")
stb_4_melt
gendervars = c("place_of_residence","Value",'ISO3')
stb_4_gender = stb_4[gendervars]
stb_4_melt <- melt(stb_4_gender, id = c("ISO3", "place_of_residence"),
variable.name = "Indicator", value.name = "Value")
stb_4_melt
world_data['Value'] <- (stb_4_melt$Value[match(world_data$ISO3, stb_4_melt$ISO3)])
tail(world_data)
world_data
world_data[world_data$region=='Thailand']
world_data[world_data$region=='Thailand', ]
source('shiny_main.R')
source('shiny_main.R')
source('shiny_main.R')
source('shiny_main.R')
source('shiny_main.R')
myFilteredDf = filter4()
stb_4_2015_2019_vdur = subset(stb_4, select = -c(male,female, not_stated_gender, average_age, age_14andbelow,age_15to19,age_20to24,age_25to34,age_35to44,age_45to54,age_55to64,age_65andabove,not_stated_age,average_duration,visitor_days))
stb_4_2015_2019_vdur_melt = melt(stb_4_2015_2019_vdur,id=c('month','region','place_of_residence'))
stb_4_2015_2019_vdur_melt
ggplot(data = stb_4_2015_2019_vdur_melt, aes(x=variable, xlabel=TRUE, y=value, fill=variable)) +
geom_bar(position = 'dodge',stat="identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title="Visit Duration",x ="Duration", y = "Frequency of Occurrence")+
theme(legend.position = "none")
ggplot(data = stb_4_2015_2019_vdur_melt, aes(x=variable, xlabel=TRUE, y=value, fill=variable)) +
geom_bar(position = 'dodge',stat="identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title="Visit Duration",x ="Duration", y = "Frequency of Occurrence")+
theme(legend.position = "none")
ggplot(data = stb_4_2015_2019_vdur_melt, aes(x=variable, xlabel=TRUE, y=value, fill=variable)) +
geom_bar(position = 'dodge',stat="identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title="Visit Duration",x ="Duration", y = "Frequency of Occurrence")+
theme(legend.position = "none")
stb_4_2015_2019_vdur_melt
source('shiny_main.R')
stb_4_2015_2019 <- subset(myFilteredDf, as.numeric(format(stb_4$month,'%Y'))>=2015 & as.numeric(format(stb_4$month,'%Y'))<=2019)
stb_4_2015_2019_vdur = subset(stb_4_2015_2019, select = -c(male,female, not_stated_gender, average_age, age_14andbelow,age_15to19,age_20to24,age_25to34,age_35to44,age_45to54,age_55to64,age_65andabove,not_stated_age,average_duration,visitor_days))
stb_4_2015_2019 <- subset(myFilteredDf, as.numeric(format(stb_4$month,'%Y'))>=2015 & as.numeric(format(stb_4$month,'%Y'))<=2019)
stb_4_2015_2019 <- subset(stb_4, as.numeric(format(stb_4$month,'%Y'))>=2015 & as.numeric(format(stb_4$month,'%Y'))<=2019)
stb_4_2015_2019_vdur = subset(stb_4_2015_2019, select = -c(male,female, not_stated_gender, average_age, age_14andbelow,age_15to19,age_20to24,age_25to34,age_35to44,age_45to54,age_55to64,age_65andabove,not_stated_age,average_duration,visitor_days))
stb_4_2015_2019_vdur_melt = melt(stb_4_2015_2019_vdur,id=c('month','region','place_of_residence'))
colnames(stb_4_2015_2019_vdur_melt)
dim(stb_4_2015_2019_vdur_melt)
stb_4_2015_2019_vdur_melt
?subset
stb_4_2015_2019_vdur
stb_4_2015_2019_vdur_melt
stb_4_2015_2019_vdur_melt = melt(stb_4_2015_2019_vdur,id=c('region','place_of_residence'))
source('shiny_main.R')
unique(stb_4_2015_2019_vdur_melt$variable)
stb_4_2015_2019_vdur_melt = melt(stb_4_2015_2019_vdur,id=c('month','region','place_of_residence'))
unique(stb_4_2015_2019_vdur_melt$variable)
source('shiny_main.R')
source('shiny_main.R')
stb_4_2015_2019 <- subset(myFilteredDf, as.numeric(format(stb_4$month,'%Y'))>=2015 & as.numeric(format(stb_4$month,'%Y'))<=2019)
stb_4_2015_2019_vdur = subset(stb_4_2015_2019, select = -c(male,female, not_stated_gender, average_age, age_14andbelow,age_15to19,age_20to24,age_25to34,age_35to44,age_45to54,age_55to64,age_65andabove,not_stated_age,average_duration,visitor_days))
stb_4_2015_2019_vdur_melt = melt(stb_4_2015_2019_vdur,id=c('month','region','place_of_residence'))
stb_4_2015_2019_vdur_melt = stb_4_2015_2019_vdur_melt[, !colnames(stb_4_2015_2019_vdur_melt) %in% c('yearmonth','Value')]
colnames(stb_4_2015_2019_vdur_melt)
source('shiny_main.R')
source('shiny_main.R')
source('shiny_main.R')
source('shiny_main.R')
source('shiny_main.R')
source('shiny_main.R')
source('~/GitHub/ASARDashboard/shiny_main.R')
source('~/GitHub/ASARDashboard/shiny_main.R')
unique()stb_4_2015_2019
stb_4_2015_2019
colnames(stb_4_2015_2019)
source('shiny_main.R')
if(length(new.packages)) install.packages(new.packages)
list.of.packages <- c("shiny", "readxl","DT","shinyWidgets","dplyr","forecast","ggplot2",
"maps","ggiraph","reshape2","rvest","formattable","magrittr","RColorBrewer","cluster")
list.of.packages <- c("shiny", "readxl","DT","shinyWidgets","dplyr","forecast","ggplot2",
"maps","ggiraph","reshape2","rvest","formattable","magrittr","RColorBrewer","cluster")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
new.packages
if(length(new.packages)>0) {install.packages(new.packages)}
remove.packages("cluster")
remove.packages("RColorBrewer")
library(RColorBrewer)
library(RColorBrewer)
remove.packages('rvest')
library(rvest)
list.of.packages <- c("shiny", "readxl","DT","shinyWidgets","dplyr","forecast","ggplot2",
"maps","ggiraph","reshape2","rvest","formattable","magrittr","RColorBrewer","cluster")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
new.packages
library(rvest)
if(length(new.packages)>0) {install.packages(new.packages)}
install.packages(new.packages)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
new.packages
source('~/GitHub/ASARDashboard/mainFunctions.R', echo=TRUE)
library(shiny); source('shiny_main.R')
my_theme <- function () {
theme_bw() + theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white'))
}
my_theme
source('shiny_main.R')
source('shiny_main.R')
source('shiny_main.R')
source('shiny_main.R')
source('shiny_main.R')
source('shiny_main.R')
